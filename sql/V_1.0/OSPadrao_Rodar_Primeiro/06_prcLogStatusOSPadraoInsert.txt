SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[prcLogStatusOSPadraoInsert]
	@p_ID_OS				BIGINT		= NULL,
	@p_DT_DATA_LOG_OS			DATETIME	= NULL,	
	@p_ST_STATUS_OS				INT		= NULL,
	@p_nidUsuarioAtualizacao		NUMERIC(18,0)	= NULL,
	@p_ID_LOG_STATUS_OS			BIGINT		OUTPUT
	
AS
BEGIN

	-- Declaração de Variáveis
	DECLARE @cdsErrorMessage	NVARCHAR(4000),
			@nidErrorSeverity	INT,
			@nidErrorState		INT,
			@nidLog				NUMERIC(18,0)

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY

		BEGIN TRANSACTION

		INSERT INTO dbo.tbLogStatusOSPadrao
		        ( ID_OS,
		          DT_DATA_LOG_OS,
		          ST_STATUS_OS,
		          nidUsuarioAtualizacao,
		          dtmDataHoraAtualizacao )
		VALUES
		        ( @p_ID_OS,
		          @p_DT_DATA_LOG_OS,
		          @p_ST_STATUS_OS,
		          @p_nidUsuarioAtualizacao,
		          GETDATE()
		          )

		SET @p_ID_LOG_STATUS_OS = @@IDENTITY

		EXECUTE dbo.prcLogGravar 
					@p_nidLog			= @nidLog,
					@p_nidUsuarioAtualizacao	= @p_nidUsuarioAtualizacao,
					@p_ccdAcao			= 'I',
					@p_cnmTabela			= 'tbLogStatusOSPadrao',
					@p_nidPK			= @p_ID_LOG_STATUS_OS,
					@p_nidLogReturn			= @nidLog OUTPUT
	
		COMMIT TRANSACTION
	
	END TRY

	BEGIN CATCH

		SELECT	@cdsErrorMessage	= ERROR_MESSAGE(),
				@nidErrorSeverity	= ERROR_SEVERITY(),
				@nidErrorState		= ERROR_STATE();

		ROLLBACK TRANSACTION

		-- Use RAISERROR inside the CATCH block to return error
		-- information about the original error that caused
		-- execution to jump to the CATCH block.
		RAISERROR (@cdsErrorMessage, -- Message text.
				   @nidErrorSeverity, -- Severity.
				   @nidErrorState -- State.
				   )

	END CATCH

END

